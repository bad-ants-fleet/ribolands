
import unittest

import os
import RNA

from ribolands import RiboLandscape
from ribolands.parser import parse_barriers

SKIP = False

A = """
    AAAGCCGCCUUAAGCCUACUUAGAUGGAAGUGACGUACGGGUAUUGGUACACGAUUUUAC
    ....(((.((.(((....))))).)))((((...((((........))))...))))...
    ................(((((......)))))..((((........))))..........
    ....(((.((.(((....))))).)))((((...((((........))))...))))...
    ...(((((((..(...((((........))))...)..))))...)))............
    ........(((.(.((((((((........))).))).)).))..)).............
    ....(((.(.((((....))))).)))((((...((((.(....).))))...))))...
    ....(((...((((....))))..))).......((((........))))..........
    ....(((...((((....))))..)))..((((.((((.(....).))))......))))
    ......((((......(((((......)))))......))))..((.....)).......
    ........((.(((....)))))...(((((...((((.(....).))))...)))))..
    ....((..((...((.(((((......)))))..))...))....)).............
    ....(((.(.((((....))))).))).......((((........))))..........
    ...((........))...(......)........((((.(....).))))..........
    ....(((.(.((((....))))).))).(((...((((........))))...)))....
    ...((((((....((.(((((......)))))..))...)))...)))............
    ....((...(((((....)))))..)).......((((........))))..........
    ...(((((((......(((((......)))))......))))...)))............
    ((((.((......(((.((((..(((.......)))..))))...)))...)).))))..
    ...((((((.((....(((((......)))))...)).))....))))............
    ....(((.((.(((....))))).)))((((...((((.(....).))))...))))...
    ...(((((((...((.(((((......)))))..))..)))...))))............
    ....(((..(((((....))))).)))((((...((((.(....).))))...))))...
    ...(((((((...((..((((......))))...))..))))...)))............
    ....(((.((.(((....))))).)))((((..(((((.(....).))))..)))))...
    ....((((..((((....))))).))).(((...((((........))))...)))....
    ...(((((((...((.(((((......)))))..))..))))...)))............
    ....((...(((((....)))))..)).......((((........))))..........
    .....((.((.(((....))))).))(((((...((((........))))...)))))..
    ....(((.(.((((....))))).))).......((((........))))..........
    .......(((...(.(..((.....))..)...)....)))...((...)).........
    ....(((.((..((....)).)).)))..((...((((........))))...)).....
    ....(((.(.((((....))))).))).(((...((((.(....).))))...)))....
    ....(((.((.(((....))))).))).(((...((((........))))...)))....
    .......(((((((....)))))..))((((...((((........))))...))))...
    .......(((((((....)))))..)).......((((.(....).))))..........
    .........(((((....)))))...(((((...((((........))))...)))))..
    ....((....((((....))))...)).......((((........))))..........
    ....((..((.(((....)))))..))((((...((((........))))...))))...
    ......(((.......(((((..(((.......)))..)))))..)))............
    ....(((...((((....))))..))).(((...((((........))))...)))....
    ....(((.((.(((....))))).)))..((...((((.(....).))))))........
    ....(((..(((((....))))).)))..((((.((.((.(((....))).)))).))))
    ...(((((((...((.((((........))))..))..))))...)))............
    ....(((.((.(((....))))).)))..(((...(((.(....).))))))........
    ....(((.((.(((....))))).))).......((((.(....).))))..........
    ......((((......(((((......)))))......))))((((.....)))).....
    ......((.....)).(((((......)))))..((((.(....).))))..........
    ......(((....(((((((((........))).))..))))...)))............
    ...(((((((...((.((((........))))..))..))))...)))............
    .....(((......((.........))..)))..((((........))))..........
    ....(((..(((((....))))).)))..(((((............)).)))(......)
    ...(((((((...((.(((((......)))))..))..))))...)))............
    ......(((.....((((((((........))).))).)).....)))............
    ...(((((((...(.(.(((........)))).)....)))...))))............
    ....(((.(.((((....))))).)))..(....((((........)))).)........
    ...(((((((..(...(((((......)))))...)..))))...)))............
    ...(((((((...(.(..(((......))).).)....)))...))))............
    ...(((((((...(..(((((......))))).)....))))...)))............
    ....(((..(((((....))))).)))((((...((((........))))...))))...
    ....(((.(.((((....))))).)))((((...((((........))))...))))...
    ....(((...((((....))))..))).(((...((((........))))...)))....
    .(((.(((.....)).(((((......)))))..((((.(....).))))..).)))...
    .......((.....((((((((........))).))).)).....)).............
    .......(((((((....)))))..)).(((...((((........))))...)))....
    ....(((..(((((....))))).))).......((((........))))..........
    .........(((((....))))).((((.(((...(((.(....).))))))...)))).
    ....(((.(.((((....))))).))).......((((........))))..........
    ...(((((((...(..(((((......))))).)....))))...)))............
    ...(((((((((.(..(((((......))))).).)).))))...)))............
    ....(((.(.((((....))))).)))..((...((((........))))...)).....
    .....((.(.((((....))))).))(((((...((((........))))...)))))..
    ...(((((((...(..(((((......)))))...)..))))...)))............
    ....(((.(.((((....))))).))).(((...((((........))))...)))....
    ...(((((((...((.((((........))))..))..))))...)))............
    ................(((((......)))))..((((.(....).))))..........
    ...(((((((...((.(((((......)))))..))..))))...)))............
    ....(((.(.((((....))))).))).......((((........))))..........
    ........(((..(.((....)).)..)))....((((........))))..........
    ...(((((((((.(..(((((......))))).).)).))))...)))............
    ....(((.((.(((....))))).)))((((...((((.(....).))))...))))...
    ....(((.((.(((....))))).))).......((((........))))..........
    ....(((.((.(((....))))).)))((((...((((........))))...))))...
    ...(((((((...((.(((((......)))))..))..))))...)))............
    ...((((.........(((((..(((.......)))..))))).))))............
    .....((......(((.((((..(((.......)))..))))...)))...)).......
    ....(((.((.(((....))))).)))((((...((((........))))...))))...
    ...(((((((.......(((........))).......))))...)))............
    ......(((....((((((((......))))).......)))...)))............
    ...(((((((...(.(.((((......))))).)....))))...)))............
    ...(((((((......(((((......)))))......))))...)))............
    ......((((......(((((......)))))......))))....((.....)).....
    ....(((.((.(((....))))).))).(((...((((........))))...)))....
    ...(((.(((((....(((((......)))))...)).)))....)))............
    ...(((((((......(((((......)))))......))))...)))............
    ....(((.((.(((....))))).))).......((((........))))..........
    ......(((....((((((((......))))).......)))...)))............
    ...(((((((......(((((......)))))......))))...)))............
    ...(((((((...(..(((((......))))).)....))))...)))............
    ....(((.(.((((....))))).)))..(((...(((........))))))........
    ....(((.(.((((....))))).)))((((...((((.(....).))))...))))...
""".split()

@unittest.skipIf(SKIP, "skipping tests")
class TestRiboLandscape(unittest.TestCase):
    def test_addnodes(self):
        vrna_md = RNA.md()
        vrna_md.temperature = 25
        seq = "AAAGCCGCCUUAAGCCUACUUAGAUGGAAGUGACGUACGGGUAUUGGUACACGAUUUUAC"
        RL = RiboLandscape(seq, vrna_md)
        RL.addnode('foo')
        assert RL.nodes['foo']['structure'] is None
        assert RL.nodes['foo']['energy'] is None
        assert RL.nodes['foo']['identity'] == 'n0'
        assert RL.nodes['foo']['occupancy'] == 0

        ss = '....(((.((.(((....))))).)))((((...((((........))))...))))...' 
        en = -10.94
        RL.addnode('bar', structure = ss)
        assert RL.nodes['bar']['structure'] == ss
        assert RL.nodes['bar']['energy'] == int(round(en*100))
        assert RL.nodes['bar']['identity'] == 'n1'
        assert RL.nodes['bar']['occupancy'] == 0

        ss = '....(((.((.(((....))))).)))((((...((((........))))...))))...' 
        en = -10.94
        with self.assertRaises(AssertionError) as e:
            RL.addnode('foo', structure = ss, energy = -9)

        with self.assertRaises(AssertionError) as e:
            RL.addnode(ss, structure = ss, energy = str(en), mynewatt = 15)
        RL.addnode(ss, structure = ss, energy = int(round(en*100)), mynewatt = 15)
        assert RL.nodes[ss]['structure'] == ss
        assert RL.nodes[ss]['energy'] == int(round(en*100))
        assert RL.nodes[ss]['identity'] == 'n2'
        assert RL.nodes[ss]['occupancy'] == 0
        assert RL.nodes[ss]['mynewatt'] == 15

    def test_workflow(self):
        btree = """
              AGACGACAAGGUUGAAUCGCACCCACAGUCUAUGAGUCGGUGACAACAUU
            1 ..........((((.((((.((.((.......)).))))))..))))...  -6.70    0  13.00
            2 ..........((((.((((.((...((.....)).))))))..))))...  -6.10    1   2.10
            3 ..........((((.....((((.((.........)).)))).))))...  -5.90    1   6.30
            4 ((((.....(((........)))....))))....(((...)))......  -5.70    1   8.50
            5 ...((((...)))).....((((.((.........)).))))........  -5.60    3   4.80
            6 .(((......)))......((((.((.........)).))))........  -5.50    5   4.30
            7 ..........((((..((((.....((.....)).....))))))))...  -5.50    3   5.30
            8 ((((.....(((........)))....))))...................  -5.00    4   3.40
            9 ((((.....((.((.....))))....))))....(((...)))......  -5.00    4   2.80
           10 ((((.....((.((.....)).))...))))....(((...)))......  -4.90    4   3.50
        """
        brates = """ 1.177    0.02829  0.0006651  0.0001121  0.0002574  0.0005517    0.00037  6.188e-07  8.604e-08  8.272e-08 
                   0.09657     0.3762          0          0          0          0  5.296e-07          0          0          0 
                  0.002881          0      1.378  4.753e-07   0.004488      0.011   0.001809          0          0          0 
                  0.000405          0  3.967e-07      1.803  1.587e-06  1.319e-06  6.156e-07   0.009484   0.004989   0.002016 
                  0.000817          0   0.003289  1.394e-06       2.07   0.008785          0          0          0          0 
                  0.001792          0   0.008247  1.185e-06   0.008992      2.474          0          0          0          0 
                  0.001825  7.653e-07    0.00206    8.4e-07          0          0      2.378          0          0          0 
                 8.318e-06          0          0    0.03527          0          0          0      3.295          0          0 
                 1.759e-06          0          0    0.02822          0          0          0          0     0.6094   0.001226 
                  1.95e-06          0          0    0.01315          0          0          0          0   0.001413     0.7636 """

        vrna_md = RNA.md()
        lmins = parse_barriers(btree, is_file = False, return_tuple = True)

        RM = []
        for line in brates.split('\n'):
            RM.append(list(map(float, line.strip().split())))

        seq = lmins[0]
        RL = RiboLandscape(seq, vrna_md)

        # Import structures
        for lm in lmins[1:]: 
            RL.addnode(lm.id, structure = lm.structure, energy = int(round(lm.energy*100)), identity = f'n{lm.id}')

        # Import rates
        for i1, row in enumerate(RM, 1):
            for i2, val in enumerate(row, 1):
                if val != 0:
                    RL.addedge(i1, i2, weight = val)

        # Print and plot output files
        rbin, rtxt, bar, _ = RL.get_simulation_files_tkn('RL_test')
        RL.to_crn()
        os.remove(rbin)
        os.remove(rtxt)
        os.remove(bar)


if __name__ == '__main__':
    unittest.main()
